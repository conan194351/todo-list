// Code generated by "enumer -type=ErrorCode"; DO NOT EDIT.

package errs

import (
	"fmt"
	"strings"
)

const _ErrorCodeName = "ErrNoneErrBadRequestErrUnauthorizedErrForbiddenErrNotFoundErrMethodNotAllowedErrRequestTimeoutErrConflictErrInternalServerErrServiceUnavailableErrGatewayTimeoutErrMalformedJSONErrEmbeddingErrChatCompletion"

var _ErrorCodeIndex = [...]uint8{0, 7, 20, 35, 47, 58, 77, 94, 105, 122, 143, 160, 176, 188, 205}

const _ErrorCodeLowerName = "errnoneerrbadrequesterrunauthorizederrforbiddenerrnotfounderrmethodnotallowederrrequesttimeouterrconflicterrinternalservererrserviceunavailableerrgatewaytimeouterrmalformedjsonerrembeddingerrchatcompletion"

func (i ErrorCode) String() string {
	if i < 0 || i >= ErrorCode(len(_ErrorCodeIndex)-1) {
		return fmt.Sprintf("ErrorCode(%d)", i)
	}
	return _ErrorCodeName[_ErrorCodeIndex[i]:_ErrorCodeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ErrorCodeNoOp() {
	var x [1]struct{}
	_ = x[ErrNone-(0)]
	_ = x[ErrBadRequest-(1)]
	_ = x[ErrUnauthorized-(2)]
	_ = x[ErrForbidden-(3)]
	_ = x[ErrNotFound-(4)]
	_ = x[ErrMethodNotAllowed-(5)]
	_ = x[ErrRequestTimeout-(6)]
	_ = x[ErrConflict-(7)]
	_ = x[ErrInternalServer-(8)]
	_ = x[ErrServiceUnavailable-(9)]
	_ = x[ErrGatewayTimeout-(10)]
	_ = x[ErrMalformedJSON-(11)]
	_ = x[ErrEmbedding-(12)]
	_ = x[ErrChatCompletion-(13)]
}

var _ErrorCodeValues = []ErrorCode{ErrNone, ErrBadRequest, ErrUnauthorized, ErrForbidden, ErrNotFound, ErrMethodNotAllowed, ErrRequestTimeout, ErrConflict, ErrInternalServer, ErrServiceUnavailable, ErrGatewayTimeout, ErrMalformedJSON, ErrEmbedding, ErrChatCompletion}

var _ErrorCodeNameToValueMap = map[string]ErrorCode{
	_ErrorCodeName[0:7]:          ErrNone,
	_ErrorCodeLowerName[0:7]:     ErrNone,
	_ErrorCodeName[7:20]:         ErrBadRequest,
	_ErrorCodeLowerName[7:20]:    ErrBadRequest,
	_ErrorCodeName[20:35]:        ErrUnauthorized,
	_ErrorCodeLowerName[20:35]:   ErrUnauthorized,
	_ErrorCodeName[35:47]:        ErrForbidden,
	_ErrorCodeLowerName[35:47]:   ErrForbidden,
	_ErrorCodeName[47:58]:        ErrNotFound,
	_ErrorCodeLowerName[47:58]:   ErrNotFound,
	_ErrorCodeName[58:77]:        ErrMethodNotAllowed,
	_ErrorCodeLowerName[58:77]:   ErrMethodNotAllowed,
	_ErrorCodeName[77:94]:        ErrRequestTimeout,
	_ErrorCodeLowerName[77:94]:   ErrRequestTimeout,
	_ErrorCodeName[94:105]:       ErrConflict,
	_ErrorCodeLowerName[94:105]:  ErrConflict,
	_ErrorCodeName[105:122]:      ErrInternalServer,
	_ErrorCodeLowerName[105:122]: ErrInternalServer,
	_ErrorCodeName[122:143]:      ErrServiceUnavailable,
	_ErrorCodeLowerName[122:143]: ErrServiceUnavailable,
	_ErrorCodeName[143:160]:      ErrGatewayTimeout,
	_ErrorCodeLowerName[143:160]: ErrGatewayTimeout,
	_ErrorCodeName[160:176]:      ErrMalformedJSON,
	_ErrorCodeLowerName[160:176]: ErrMalformedJSON,
	_ErrorCodeName[176:188]:      ErrEmbedding,
	_ErrorCodeLowerName[176:188]: ErrEmbedding,
	_ErrorCodeName[188:205]:      ErrChatCompletion,
	_ErrorCodeLowerName[188:205]: ErrChatCompletion,
}

var _ErrorCodeNames = []string{
	_ErrorCodeName[0:7],
	_ErrorCodeName[7:20],
	_ErrorCodeName[20:35],
	_ErrorCodeName[35:47],
	_ErrorCodeName[47:58],
	_ErrorCodeName[58:77],
	_ErrorCodeName[77:94],
	_ErrorCodeName[94:105],
	_ErrorCodeName[105:122],
	_ErrorCodeName[122:143],
	_ErrorCodeName[143:160],
	_ErrorCodeName[160:176],
	_ErrorCodeName[176:188],
	_ErrorCodeName[188:205],
}

// ErrorCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ErrorCodeString(s string) (ErrorCode, error) {
	if val, ok := _ErrorCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ErrorCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ErrorCode values", s)
}

// ErrorCodeValues returns all values of the enum
func ErrorCodeValues() []ErrorCode {
	return _ErrorCodeValues
}

// ErrorCodeStrings returns a slice of all String values of the enum
func ErrorCodeStrings() []string {
	strs := make([]string, len(_ErrorCodeNames))
	copy(strs, _ErrorCodeNames)
	return strs
}

// IsAErrorCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ErrorCode) IsAErrorCode() bool {
	for _, v := range _ErrorCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
